#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'pp'
require_relative './class.rb'
require_relative './lexer.rb'
require_relative './analize.rb'
require_relative './ir.rb'

class MyParser < Racc::Parser

module_eval(<<'...end parser.rb/module_eval...', 'parser.rb', 179)
  def parse
    begin
      filename = ARGV[0]
      @tokens = lexscan(filename)
      do_parse
    rescue Racc::ParseError => e
      $stderr.puts e, e.backtrace
      $stderr.print "parse error : at #{@pos}\n"
    end
  end
  
  def next_token
    @info = @tokens.shift
    @pos = @info[1][1] if @info
    [@info[0], @info[1][0]] if @info
  end

...end parser.rb/module_eval...
##### State transition tables begin ###

racc_action_table = [
    60,    62,    60,    62,   140,   141,    60,    62,    29,    61,
    74,    61,    29,    38,    66,    61,    66,    45,    27,    15,
    66,   132,    91,    24,    41,    92,    43,    42,    44,    23,
    65,    64,    65,    64,    60,    62,    65,    64,    30,   138,
    73,   136,    30,    61,    60,    62,    60,    62,    66,    16,
    31,    19,    76,    61,    20,    61,    23,    38,    66,    68,
    66,    45,    27,   115,    65,    64,     8,     9,    41,    88,
    43,    42,    44,    89,    65,    64,    65,    64,    60,    62,
    60,    62,    60,    62,    60,    62,   112,    61,   109,    61,
   105,    61,    66,    61,    66,    34,    66,   101,    66,    76,
    25,    90,     8,     9,   139,    27,    70,    71,    65,    64,
    65,    64,    65,    64,    65,    64,    60,    62,    60,    62,
    60,    62,    80,    75,    79,    61,    76,    61,    91,    61,
    66,    92,    66,    77,    66,    95,    93,    96,    94,    95,
    93,    96,    94,    60,    62,    69,    65,    64,    65,    64,
    65,    64,    61,    23,    60,    62,    38,    66,    97,    98,
    45,    27,    48,    61,    30,     8,     9,    41,    66,    43,
    42,    44,    32,    65,    64,    99,   100,    60,    62,    60,
    62,    97,    98,   147,    65,    64,    61,    22,    61,   149,
    38,    66,    18,    66,    45,    27,    10,    60,    62,    97,
    98,    41,   152,    43,    42,    44,    61,    65,    64,    65,
    64,    66,    60,    62,    90,    60,    62,    95,    93,    96,
    94,    61,    60,    62,    61,   nil,    66,    65,    64,    66,
   nil,    61,     8,     9,   107,    71,    66,   148,    76,   nil,
    60,    62,    65,    64,   nil,    65,    64,    97,    98,    61,
    60,    62,    65,    64,    66,    97,    98,     8,     9,    61,
   134,    76,   nil,    38,    66,   135,    76,    45,    27,   nil,
    65,    64,    99,   100,    41,   nil,    43,    42,    44,   nil,
    65,    64,    60,    62,    60,    62,   137,    76,    60,    62,
   nil,    61,   nil,    61,   nil,    38,    66,    61,    66,    45,
    27,   nil,    66,    99,   100,   nil,    41,   nil,    43,    42,
    44,   nil,    65,    64,    65,    64,    60,    62,    65,    64,
     8,     9,   nil,   nil,   nil,    61,   nil,   nil,   nil,    38,
    66,   nil,   nil,    45,    27,   116,    60,    62,   nil,   nil,
    41,   nil,    43,    42,    44,    61,    65,    64,   nil,    38,
    66,   nil,   nil,    45,    27,    84,    60,    62,     8,     9,
    41,   nil,    43,    42,    44,    61,    65,    64,   nil,    38,
    66,   nil,   nil,    45,    27,    86,    60,    62,   nil,   nil,
    41,   nil,    43,    42,    44,    61,    65,    64,    60,    62,
    66,    60,    62,   nil,    60,    62,   nil,    61,   nil,   nil,
    61,   nil,    66,    61,   nil,    66,    65,    64,    66,   nil,
   nil,   nil,   nil,   nil,    60,    62,   nil,   nil,    65,    64,
   nil,    65,    64,    61,    65,    64,    60,    62,    66,    60,
    62,   nil,    60,    62,   nil,    61,   nil,   nil,    61,   nil,
    66,    61,   nil,    66,    65,    64,    66,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    65,    64,   nil,    65,
    64,   nil,    65,    64 ]

racc_action_check = [
   152,   152,   149,   149,   131,   131,   105,   105,    37,   152,
    36,   149,    20,   152,   152,   105,   149,   152,   152,     7,
   105,   105,    54,    16,   152,    54,   152,   152,   152,    16,
   152,   152,   149,   149,   101,   101,   105,   105,    37,   114,
    36,   112,    20,   101,   147,   147,   100,   100,   101,     7,
    22,    12,    82,   147,    12,   100,    22,   147,   147,    31,
   100,   147,   147,    81,   101,   101,    31,    31,   147,    52,
   147,   147,   147,    52,   147,   147,   100,   100,    99,    99,
    98,    98,    97,    97,    96,    96,    78,    99,    74,    98,
    64,    97,    99,    96,    98,    24,    97,    59,    96,   130,
    17,    53,    24,    24,   130,    17,    33,    33,    99,    99,
    98,    98,    97,    97,    96,    96,    95,    95,   141,   141,
    94,    94,    44,    39,    43,    95,    39,   141,   119,    94,
    95,   119,   141,    41,    94,    55,    55,    55,    55,   121,
   121,   121,   121,    27,    27,    32,    95,    95,   141,   141,
    94,    94,    27,    30,   138,   138,    27,    27,   122,   122,
    27,    27,    27,   138,    29,    27,    27,    27,   138,    27,
    27,    27,    23,    27,    27,   127,   127,   137,   137,    93,
    93,   123,   123,   142,   138,   138,   137,    15,    93,   145,
   137,   137,    10,    93,   137,   137,     1,   136,   136,   124,
   124,   137,   151,   137,   137,   137,   136,   137,   137,    93,
    93,   136,    92,    92,   118,    91,    91,   120,   120,   120,
   120,    92,    60,    60,    91,   nil,    92,   136,   136,    91,
   nil,    60,    71,    71,    67,    67,    60,   143,   143,   nil,
    89,    89,    92,    92,   nil,    91,    91,    56,    56,    89,
   135,   135,    60,    60,    89,   125,   125,     2,     2,   135,
   106,   106,   nil,   135,   135,   111,   111,   135,   135,   nil,
    89,    89,    57,    57,   135,   nil,   135,   135,   135,   nil,
   135,   135,    42,    42,    88,    88,   113,   113,    45,    45,
   nil,    42,   nil,    88,   nil,    42,    42,    45,    88,    42,
    42,   nil,    45,   126,   126,   nil,    42,   nil,    42,    42,
    42,   nil,    42,    42,    88,    88,    83,    83,    45,    45,
     0,     0,   nil,   nil,   nil,    83,   nil,   nil,   nil,    83,
    83,   nil,   nil,    83,    83,    83,    46,    46,   nil,   nil,
    83,   nil,    83,    83,    83,    46,    83,    83,   nil,    46,
    46,   nil,   nil,    46,    46,    46,    47,    47,    46,    46,
    46,   nil,    46,    46,    46,    47,    46,    46,   nil,    47,
    47,   nil,   nil,    47,    47,    47,    80,    80,   nil,   nil,
    47,   nil,    47,    47,    47,    80,    47,    47,    79,    79,
    80,    77,    77,   nil,    76,    76,   nil,    79,   nil,   nil,
    77,   nil,    79,    76,   nil,    77,    80,    80,    76,   nil,
   nil,   nil,   nil,   nil,    66,    66,   nil,   nil,    79,    79,
   nil,    77,    77,    66,    76,    76,    62,    62,    66,    61,
    61,   nil,    90,    90,   nil,    62,   nil,   nil,    61,   nil,
    62,    90,   nil,    61,    66,    66,    90,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    62,    62,   nil,    61,
    61,   nil,    90,    90 ]

racc_action_pointer = [
   295,   196,   232,   nil,   nil,   nil,   nil,    15,   nil,   nil,
   192,   nil,    35,   nil,   nil,   153,     6,    84,   nil,   nil,
     8,   nil,    33,   139,    77,   nil,   nil,   140,   nil,   130,
   130,    41,   121,    88,   nil,   nil,     6,     4,   nil,   107,
   nil,   116,   279,   107,   105,   285,   333,   353,   nil,   nil,
   nil,   nil,    58,    87,    12,   129,   245,   268,   nil,    74,
   219,   426,   423,   nil,    73,   nil,   411,   216,   nil,   nil,
   nil,   207,   nil,   nil,    54,   nil,   391,   388,    57,   385,
   373,    47,    33,   313,   nil,   nil,   nil,   nil,   281,   237,
   429,   212,   209,   176,   117,   113,    81,    79,    77,    75,
    43,    31,   nil,   nil,   nil,     3,   242,   nil,   nil,   nil,
   nil,   247,    24,   268,    23,   nil,   nil,   nil,   200,   118,
   211,   133,   156,   179,   197,   253,   299,   171,   nil,   nil,
    80,   -14,   nil,   nil,   nil,   247,   194,   174,   151,   nil,
   nil,   115,   155,   219,   nil,   173,   nil,    41,   nil,    -1,
   nil,   184,    -3,   nil ]

racc_action_default = [
    -2,   -82,    -1,    -3,    -5,    -6,    -7,   -82,   -26,   -27,
   -82,    -4,   -82,    -9,   -11,   -82,   -13,   -82,   154,    -8,
   -82,   -12,   -13,   -82,   -82,   -15,   -20,   -82,   -10,   -82,
   -13,   -82,   -82,   -82,   -17,   -21,   -82,   -82,   -28,   -82,
   -30,   -82,   -82,   -82,   -82,   -38,   -82,   -82,   -42,   -43,
   -45,   -47,   -49,   -51,   -53,   -55,   -58,   -63,   -66,   -69,
   -82,   -82,   -82,   -73,   -77,   -78,   -82,   -82,   -19,   -14,
   -16,   -82,   -23,   -24,   -82,   -29,   -82,   -82,   -82,   -82,
   -38,   -82,   -37,   -82,   -40,   -44,   -41,   -46,   -82,   -82,
   -82,   -82,   -82,   -82,   -82,   -82,   -82,   -82,   -82,   -82,
   -82,   -82,   -70,   -71,   -72,   -82,   -82,   -18,   -22,   -25,
   -48,   -82,   -82,   -82,   -82,   -36,   -39,   -50,   -52,   -54,
   -56,   -57,   -59,   -60,   -61,   -62,   -64,   -65,   -67,   -68,
   -82,   -82,   -76,   -80,   -79,   -82,   -82,   -82,   -38,   -74,
   -75,   -82,   -31,   -82,   -34,   -82,   -81,   -82,   -33,   -38,
   -32,   -82,   -82,   -35 ]

racc_goto_table = [
    78,   110,    47,    81,     7,    87,     7,    49,    82,   102,
   103,   104,    33,   117,    21,   122,   123,   124,   125,    67,
     3,    83,    11,   126,   127,     1,    85,    46,    21,   106,
   133,    37,   120,   121,    72,   108,   118,   119,   114,    26,
   111,    87,   113,    82,    17,    28,     2,   131,   128,   129,
    37,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   130,   nil,   146,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   142,   nil,   144,   145,   nil,   nil,   143,
   nil,    82,   nil,   nil,   nil,   150,   nil,   151,   nil,   nil,
   153,   nil,    82 ]

racc_goto_check = [
    16,    21,    20,    18,     7,    16,     7,     4,    17,    28,
    28,    28,    12,    21,    10,    26,    26,    26,    26,    12,
     3,    20,     3,    27,    27,     1,     4,    19,    10,    17,
    21,     7,    25,    25,    15,    14,    23,    24,    18,    13,
    17,    16,    17,    17,    11,     9,     2,    31,    28,    28,
     7,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    17,   nil,    21,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    16,   nil,    16,    18,   nil,   nil,    17,
   nil,    17,   nil,   nil,   nil,    16,   nil,    18,   nil,   nil,
    16,   nil,    17 ]

racc_goto_pointer = [
   nil,    25,    46,    20,   -20,   nil,   nil,     4,   nil,    25,
    -1,    37,   -12,    22,   -36,    -2,   -42,   -37,   -42,     0,
   -25,   -75,   nil,   -53,   -53,   -59,   -78,   -74,   -51,   nil,
   nil,   -58 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     4,     5,     6,    36,    12,    13,
    14,   nil,   nil,    40,    35,   nil,    50,    39,   nil,   nil,
   nil,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    63,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 36, :_reduce_none,
  0, 36, :_reduce_none,
  1, 37, :_reduce_3,
  2, 37, :_reduce_4,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  3, 39, :_reduce_8,
  1, 43, :_reduce_9,
  3, 43, :_reduce_10,
  1, 44, :_reduce_11,
  2, 44, :_reduce_12,
  1, 45, :_reduce_13,
  4, 45, :_reduce_14,
  3, 40, :_reduce_15,
  4, 46, :_reduce_16,
  3, 46, :_reduce_17,
  5, 46, :_reduce_18,
  4, 46, :_reduce_19,
  3, 41, :_reduce_20,
  1, 47, :_reduce_21,
  3, 47, :_reduce_22,
  2, 49, :_reduce_23,
  1, 50, :_reduce_24,
  2, 50, :_reduce_25,
  1, 42, :_reduce_none,
  1, 42, :_reduce_none,
  1, 51, :_reduce_none,
  2, 51, :_reduce_none,
  1, 51, :_reduce_30,
  5, 51, :_reduce_31,
  7, 51, :_reduce_32,
  6, 51, :_reduce_33,
  5, 51, :_reduce_34,
  9, 51, :_reduce_35,
  3, 51, :_reduce_36,
  1, 53, :_reduce_none,
  0, 53, :_reduce_none,
  4, 48, :_reduce_39,
  3, 48, :_reduce_40,
  3, 48, :_reduce_41,
  2, 48, :_reduce_none,
  1, 54, :_reduce_43,
  2, 54, :_reduce_44,
  1, 55, :_reduce_none,
  2, 55, :_reduce_46,
  1, 52, :_reduce_none,
  3, 52, :_reduce_48,
  1, 56, :_reduce_none,
  3, 56, :_reduce_50,
  1, 57, :_reduce_none,
  3, 57, :_reduce_52,
  1, 58, :_reduce_none,
  3, 58, :_reduce_54,
  1, 59, :_reduce_none,
  3, 59, :_reduce_56,
  3, 59, :_reduce_57,
  1, 60, :_reduce_none,
  3, 60, :_reduce_59,
  3, 60, :_reduce_60,
  3, 60, :_reduce_61,
  3, 60, :_reduce_62,
  1, 61, :_reduce_none,
  3, 61, :_reduce_64,
  3, 61, :_reduce_65,
  1, 62, :_reduce_none,
  3, 62, :_reduce_67,
  3, 62, :_reduce_68,
  1, 63, :_reduce_none,
  2, 63, :_reduce_70,
  2, 63, :_reduce_71,
  2, 63, :_reduce_72,
  1, 64, :_reduce_none,
  4, 64, :_reduce_74,
  4, 64, :_reduce_75,
  3, 64, :_reduce_76,
  1, 65, :_reduce_77,
  1, 65, :_reduce_78,
  3, 65, :_reduce_79,
  1, 66, :_reduce_80,
  3, 66, :_reduce_81 ]

racc_reduce_n = 82

racc_shift_n = 154

racc_token_table = {
  false => 0,
  :error => 1,
  "+" => 2,
  "-" => 3,
  "*" => 4,
  "/" => 5,
  "<=" => 6,
  "<" => 7,
  ">=" => 8,
  ">" => 9,
  "==" => 10,
  "=" => 11,
  "&" => 12,
  "!=" => 13,
  "&&" => 14,
  "||" => 15,
  :SEMI => 16,
  :LPAR => 17,
  :RPAR => 18,
  :COMMA => 19,
  :RETURN => 20,
  :LBRA => 21,
  :RBRA => 22,
  :LBBRA => 23,
  :RBBRA => 24,
  :INT => 25,
  :VOID => 26,
  :IF => 27,
  :ELSE => 28,
  :WHILE => 29,
  :DO => 30,
  :FOR => 31,
  :EOF => 32,
  :DIGIT => 33,
  :IDENTIFIER => 34 }

racc_nt_base = 35

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"+\"",
  "\"-\"",
  "\"*\"",
  "\"/\"",
  "\"<=\"",
  "\"<\"",
  "\">=\"",
  "\">\"",
  "\"==\"",
  "\"=\"",
  "\"&\"",
  "\"!=\"",
  "\"&&\"",
  "\"||\"",
  "SEMI",
  "LPAR",
  "RPAR",
  "COMMA",
  "RETURN",
  "LBRA",
  "RBRA",
  "LBBRA",
  "RBBRA",
  "INT",
  "VOID",
  "IF",
  "ELSE",
  "WHILE",
  "DO",
  "FOR",
  "EOF",
  "DIGIT",
  "IDENTIFIER",
  "$start",
  "target",
  "program",
  "external_declaration",
  "declaration",
  "function_prototype",
  "function_definition",
  "type_specifier",
  "declarator_list",
  "declarator",
  "direct_declarator",
  "function_declarator",
  "parameter_type_list",
  "compound_statement",
  "parameter_declaration",
  "parameter_declarator",
  "statement",
  "expression",
  "expression_opt",
  "declaration_list",
  "statement_list",
  "assign_expr",
  "logical_OR_expr",
  "logical_AND_expr",
  "equality_expr",
  "relational_expr",
  "add_expr",
  "mult_expr",
  "unary_expr",
  "postfix_expr",
  "primary_expr",
  "argument_expression_list" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'parser.rb', 17)
  def _reduce_3(val, _values, result)
    result = [val]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 18)
  def _reduce_4(val, _values, result)
     result << [val[1]] 
    result
  end
.,.,

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.rb', 26)
  def _reduce_8(val, _values, result)
     result = Declaration.new(val[0], val[1], @pos)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 29)
  def _reduce_9(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 30)
  def _reduce_10(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 33)
  def _reduce_11(val, _values, result)
     result = [:none, val].flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 34)
  def _reduce_12(val, _values, result)
     result = '*', val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 37)
  def _reduce_13(val, _values, result)
     result = ID.new(val[0], @pos) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 38)
  def _reduce_14(val, _values, result)
     result = Ary.new(val[0], val[2], @pos) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 41)
  def _reduce_15(val, _values, result)
     result = Func_proto.new(val[0], val[1][0], val[1][1], @pos ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 44)
  def _reduce_16(val, _values, result)
     result = ID.new([:none, val[0]], @pos),  val[2], @pos 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 45)
  def _reduce_17(val, _values, result)
     result = ID.new([:none, val[0]], @pos), [], @pos 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 46)
  def _reduce_18(val, _values, result)
     result = ID.new(['*', val[1]], @pos), val[3], @pos  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 47)
  def _reduce_19(val, _values, result)
     result = ID.new(['*', val[1]], @pos), [], @pos 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 51)
  def _reduce_20(val, _values, result)
     result =  Func_def.new(val[0], val[1][0], val[1][1], val[2], @pos) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 54)
  def _reduce_21(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 55)
  def _reduce_22(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 58)
  def _reduce_23(val, _values, result)
     result = val.flatten  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 61)
  def _reduce_24(val, _values, result)
     result = [ ID.new( [:none, val[0]], @pos) ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 62)
  def _reduce_25(val, _values, result)
     result = ID.new( ['*', val[1]],  @pos) 
    result
  end
.,.,

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

module_eval(<<'.,.,', 'parser.rb', 71)
  def _reduce_30(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 73)
  def _reduce_31(val, _values, result)
     result = IF.new(val[2], val[4], ';', @pos) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 74)
  def _reduce_32(val, _values, result)
     result = IF.new( val[2],  val[4], val[6], @pos) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 75)
  def _reduce_33(val, _values, result)
     result = val[1], While.new(val[4], val[2], @pos) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 76)
  def _reduce_34(val, _values, result)
     result = While.new(val[2], val[4], @pos) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 79)
  def _reduce_35(val, _values, result)
     result = val[2], While.new(val[4], [val[8], val[6]], @pos) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 80)
  def _reduce_36(val, _values, result)
     result = Return.new(val[1], @pos ) 
    result
  end
.,.,

# reduce 37 omitted

# reduce 38 omitted

module_eval(<<'.,.,', 'parser.rb', 87)
  def _reduce_39(val, _values, result)
     result = Compound.new(val[1], val[2], @pos) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 88)
  def _reduce_40(val, _values, result)
     result =  Compound.new(val[1], nil, @pos ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 89)
  def _reduce_41(val, _values, result)
     result = Compound.new(nil, val[1], @pos ) 
    result
  end
.,.,

# reduce 42 omitted

module_eval(<<'.,.,', 'parser.rb', 93)
  def _reduce_43(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 94)
  def _reduce_44(val, _values, result)
     result = [val[0], val[1]].flatten(1) 
    result
  end
.,.,

# reduce 45 omitted

module_eval(<<'.,.,', 'parser.rb', 98)
  def _reduce_46(val, _values, result)
     result = [val[0], val[1]].flatten(1) 
    result
  end
.,.,

# reduce 47 omitted

module_eval(<<'.,.,', 'parser.rb', 102)
  def _reduce_48(val, _values, result)
     result = val[0], val[2] 
    result
  end
.,.,

# reduce 49 omitted

module_eval(<<'.,.,', 'parser.rb', 106)
  def _reduce_50(val, _values, result)
     result = Binary.new('=', val[0], val[2], @pos) 
    result
  end
.,.,

# reduce 51 omitted

module_eval(<<'.,.,', 'parser.rb', 110)
  def _reduce_52(val, _values, result)
     result = Binary.new('||', val[0], val[2], @pos) 
    result
  end
.,.,

# reduce 53 omitted

module_eval(<<'.,.,', 'parser.rb', 114)
  def _reduce_54(val, _values, result)
     result = Binary.new('&&', val[0], val[2], @pos) 
    result
  end
.,.,

# reduce 55 omitted

module_eval(<<'.,.,', 'parser.rb', 118)
  def _reduce_56(val, _values, result)
     result = Binary.new('==', val[0], val[2], @pos) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 119)
  def _reduce_57(val, _values, result)
     result = Binary.new('!=', val[0], val[2], @pos) 
    result
  end
.,.,

# reduce 58 omitted

module_eval(<<'.,.,', 'parser.rb', 123)
  def _reduce_59(val, _values, result)
     result = Binary.new('<', val[0], val[2], @pos) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 124)
  def _reduce_60(val, _values, result)
     result = Binary.new('>', val[0], val[2], @pos) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 125)
  def _reduce_61(val, _values, result)
     result = Binary.new('<=', val[0], val[2], @pos) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 126)
  def _reduce_62(val, _values, result)
     result = Binary.new('>=', val[0], val[2], @pos) 
    result
  end
.,.,

# reduce 63 omitted

module_eval(<<'.,.,', 'parser.rb', 130)
  def _reduce_64(val, _values, result)
     result = Binary.new('+', val[0], val[2], @pos) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 131)
  def _reduce_65(val, _values, result)
     result = Binary.new('-', val[0], val[2], @pos) 
    result
  end
.,.,

# reduce 66 omitted

module_eval(<<'.,.,', 'parser.rb', 135)
  def _reduce_67(val, _values, result)
     result = Binary.new('*', val[0], val[2], @pos) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 136)
  def _reduce_68(val, _values, result)
     result = Binary.new('/', val[0], val[2], @pos) 
    result
  end
.,.,

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.rb', 140)
  def _reduce_70(val, _values, result)
     result = Binary.new('-', DIGIT.new(0, @pos), val[1], @pos) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 143)
  def _reduce_71(val, _values, result)
      if val[1].class == Unary && val[1].op == '*'
    result = val[1].val
  else
    result = Unary.new('&', val[1], @pos)
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 149)
  def _reduce_72(val, _values, result)
     result = Unary.new('*', val[1], @pos) 
    result
  end
.,.,

# reduce 73 omitted

module_eval(<<'.,.,', 'parser.rb', 154)
  def _reduce_74(val, _values, result)
     result = Unary.new('*', Binary.new('+', val[0], val[2], @pos), @pos) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 155)
  def _reduce_75(val, _values, result)
     result = Refer.new(val[0], val[2], @pos) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 156)
  def _reduce_76(val, _values, result)
     result = Refer.new(val[0], :void, @pos) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 159)
  def _reduce_77(val, _values, result)
     result = Refer.new(val[0], nil, @pos) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 160)
  def _reduce_78(val, _values, result)
     result = DIGIT.new(val[0], @pos) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 161)
  def _reduce_79(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 164)
  def _reduce_80(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.rb', 165)
  def _reduce_81(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class MyParser

    
    if __FILE__ == $0
      parser = MyParser.new
      tree = parser.parse
      $sem = []
      $sem[0] = {}
      $sem[0][:print] = Env.new(:print, :proto, [["void", :none], [["int", :none]]])
      tree.each do |block|
        analize(block, 0)
        $sem.each_with_index do |h, i|
          next if i == 0
          h.clear
        end
      end
      pp tree.flatten!(1)
      tree.each do |block|
        ir(block)
      end
      pp $mid
    end
